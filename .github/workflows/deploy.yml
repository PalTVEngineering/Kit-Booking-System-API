#DO NOT CHANGE!!!
name: Deploy API to Production

# This workflow runs on any push to the 'main' branch
on:
  push:
    branches: [ main ]

jobs:
  deploy:
    # This job MUST run on your self-hosted runner
    runs-on: self-hosted

    steps:
      - name: 'Pull Latest Code & Rebuild API Container'
        run: |
          echo "Starting API deployment..."
          # Go into the API's specific source code directory on the VM
          cd /opt/booking_system/api
          
          # Pull the latest changes from the main branch
          git pull
          
          # Go back to the main project directory to access the docker-compose file
          cd /opt/booking_system
          
          # Rebuild and restart ONLY the api service, ensuring others are not affected
          docker compose up -d --build api
          
          echo "API deployment successful!"

      - name: 'Apply New SQL Migrations'
        run: |
          echo "Checking for new database migrations..."
          cd /opt/booking_system/api

          for f in migrations/*.sql; do
            # Extract just the filename (e.g., "001_add_status_to_kits.sql") from the full path
            filename=$(basename "$f")
            
            # Check if this filename already exists in our tracking table.
            # The psql command will return '1' if the record exists, and '0' if it does not.
            APPLIED_COUNT=$(docker exec -i booking_system_db psql -U postgres -d "PalTV Kit Booking System" -t -c "SELECT COUNT(*) FROM schema_migrations WHERE filename = '$filename';")
            
            # The output from psql has whitespace, so we trim it.
            APPLIED_COUNT=$(echo $APPLIED_COUNT | xargs)

            if [ "$APPLIED_COUNT" -eq "0" ]; then
              # If the count is 0, the script has NOT been applied yet.
              echo "Applying new migration: $filename"
              
              # 1. Apply the migration by piping the SQL file into psql
              cat "$f" | docker exec -i booking_system_db psql -U postgres -d "PalTV Kit Booking System"
              
              # 2. Record this script's filename in our tracking table so it doesn't run again
              docker exec -i booking_system_db psql -U postgres -d "PalTV Kit Booking System" -c "INSERT INTO schema_migrations (filename) VALUES ('$filename');"
            else
              # If the count is 1, we've seen this script before.
              echo "Skipping already applied migration: $filename"
            fi
          done
          
          echo "Database is up to date."
